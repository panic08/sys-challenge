plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.flywaydb.flyway' version '9.22.3'
    id 'nu.studer.jooq' version '9.0'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springdoc:springdoc-openapi-starter-webmvc-api:2.6.0'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
    implementation 'io.micrometer:micrometer-registry-prometheus:1.13.6'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'
    compileOnly 'org.projectlombok:lombok'
    jooqGenerator 'org.postgresql:postgresql'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

def profile = System.getProperty('spring.profiles.active', 'dev')
def props = new Properties()
file("src/main/resources/application-${profile}.properties").withInputStream {
    props.load(it)
}

flyway {
    url = "${props.get('spring.flyway.url')}"
    user = "${props.get('spring.flyway.user')}"
    password = "${props.get('spring.flyway.password')}"
    locations = "${props.get('spring.flyway.locations')}".split("\\,")
}

jooq {
    configurations {
        main {
            generateSchemaSourceOnCompilation = false
            generationTool {
                jdbc {
                    driver = "${props.get('spring.datasource.driver-class-name')}"
                    url = "${props.get('spring.datasource.url')}"
                    user = "${props.get('spring.datasource.username')}"
                    password = "${props.get('spring.datasource.password')}"
                }

                generator {
                    target {
                        packageName = 'com.syschallenge.mainservice'
                        directory = 'build/generated-src/jooq/main'
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
